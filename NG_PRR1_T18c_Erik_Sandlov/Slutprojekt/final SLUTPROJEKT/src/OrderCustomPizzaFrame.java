
import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ERIK
 */
public class OrderCustomPizzaFrame extends javax.swing.JFrame {

    /**
     * Initierar variabler, listor och fält.
     */
    ArrayList<Customer> customerList;
    int customerIndex;

    DefaultListModel dmTopping = new DefaultListModel();
    DefaultListModel dmCurrent = new DefaultListModel();
    ArrayList<Topping> toppingList = new ArrayList<>();
    Pizza currentPizza;

    /**
     *
     * @param c Tar in en lista med kunder
     * @param i Tar in det specifika indexet på kunden man vill göra ändringar
     * till
     */
    public OrderCustomPizzaFrame(ArrayList<Customer> c, int i) {
        initComponents();
        customerList = c;
        customerIndex = i;
        ButtonGroup group = new ButtonGroup();
        group.add(this.radioSmall);
        group.add(this.radioMedium);
        group.add(this.radioLarge);
        addToppings();
        refreshlstTopping();
    }

    /**
     * Enkel metod för att lägga till alla toppings i listan som ska finnas från
     * början. Det ska vara lätt att lägga till nya toppings till fältet i
     * framtiden.
     */
    private void addToppings() {
        this.toppingList.add(new Topping("Tomato", 2));
        this.toppingList.add(new Topping("Cheese", 2));
        this.toppingList.add(new Topping("Pickle", 5));
        this.toppingList.add(new Topping("Mushroom", 5));
        this.toppingList.add(new Topping("Ham", 3));
        this.toppingList.add(new Topping("Pineapple", 5));
        this.toppingList.add(new Topping("Kebab", 3));
        this.toppingList.add(new Topping("Banana", 5));
        this.toppingList.add(new Topping("Chicken", 3));
        this.toppingList.add(new Topping("Fries", 2));
        this.toppingList.add(new Topping("Meatball", 4));
        this.toppingList.add(new Topping("Anchovy", 3));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioSmall = new javax.swing.JRadioButton();
        radioMedium = new javax.swing.JRadioButton();
        radioLarge = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstToppings = new javax.swing.JList<>();
        btnAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstCurrent = new javax.swing.JList<>();
        btnRemove = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        btnFinishPizza = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txfCost = new javax.swing.JTextField();
        btnPriceSort = new javax.swing.JButton();
        btnAlphaSort = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        photoPanel1 = new photoPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        radioSmall.setText("Small $3");
        radioSmall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioSmallActionPerformed(evt);
            }
        });

        radioMedium.setText("Medium $5");
        radioMedium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioMediumActionPerformed(evt);
            }
        });

        radioLarge.setText("Large $7");
        radioLarge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioLargeActionPerformed(evt);
            }
        });

        lstToppings.setBorder(javax.swing.BorderFactory.createTitledBorder("Toppings"));
        lstToppings.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstToppings.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lstToppings.setEnabled(false);
        jScrollPane1.setViewportView(lstToppings);

        btnAdd.setText("Add");
        btnAdd.setEnabled(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lstCurrent.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Pizza"));
        lstCurrent.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstCurrent.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lstCurrent.setEnabled(false);
        jScrollPane2.setViewportView(lstCurrent);

        btnRemove.setText("Remove");
        btnRemove.setEnabled(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnStart.setText("Start");
        btnStart.setEnabled(false);
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnFinishPizza.setText("Finish Pizza");
        btnFinishPizza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishPizzaActionPerformed(evt);
            }
        });

        jLabel1.setText("Cost:");

        txfCost.setEditable(false);

        btnPriceSort.setText("Price");
        btnPriceSort.setEnabled(false);
        btnPriceSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriceSortActionPerformed(evt);
            }
        });

        btnAlphaSort.setText("Alphabet");
        btnAlphaSort.setEnabled(false);
        btnAlphaSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlphaSortActionPerformed(evt);
            }
        });

        jLabel2.setText("Sort:");

        javax.swing.GroupLayout photoPanel1Layout = new javax.swing.GroupLayout(photoPanel1);
        photoPanel1.setLayout(photoPanel1Layout);
        photoPanel1Layout.setHorizontalGroup(
            photoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 137, Short.MAX_VALUE)
        );
        photoPanel1Layout.setVerticalGroup(
            photoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRemove, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPriceSort, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAlphaSort)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radioMedium)
                                .addGap(18, 18, 18)
                                .addComponent(btnStart))
                            .addComponent(radioLarge)
                            .addComponent(radioSmall))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnFinishPizza)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(18, 18, 18)
                                    .addComponent(txfCost, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(photoPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(photoPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(radioSmall)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(radioMedium)
                                    .addComponent(btnStart))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioLarge)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemove)
                        .addGap(29, 29, 29)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txfCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnFinishPizza))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(btnAlphaSort))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPriceSort)))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        int index = this.lstToppings.getSelectedIndex();
        /**
         * Ser till att programmet inte kraschar om man inte väljer något i
         * listan och trycker på add. Lägger till toppingen på pizzan.
         */
        if (index != -1) {
            if (currentPizza.addTopping(toppingList.get(index))) {
                this.lstCurrent.setModel(dmCurrent);
                dmCurrent.addElement(toppingList.get(index).toString());
                this.txfCost.setText("$" + currentPizza.getTotalCost());
            }
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void radioSmallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioSmallActionPerformed
        // TODO add your handling code here:
        this.btnStart.setEnabled(true);
    }//GEN-LAST:event_radioSmallActionPerformed

    private void radioMediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioMediumActionPerformed
        // TODO add your handling code here:
        this.btnStart.setEnabled(true);
    }//GEN-LAST:event_radioMediumActionPerformed

    private void radioLargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioLargeActionPerformed
        // TODO add your handling code here:
        this.btnStart.setEnabled(true);
    }//GEN-LAST:event_radioLargeActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed

        /**
         * Stänger av och sätter på knappar
         */
        this.lstCurrent.setEnabled(true);
        this.lstToppings.setEnabled(true);
        this.btnAdd.setEnabled(true);
        this.btnRemove.setEnabled(true);
        this.btnAlphaSort.setEnabled(true);
        this.btnPriceSort.setEnabled(true);

        this.btnStart.setEnabled(false);
        this.radioSmall.setEnabled(false);
        this.radioMedium.setEnabled(false);
        this.radioLarge.setEnabled(false);
        /**
         * Skapar en temporär pizza med olika maxtoppings beroende på vilken
         * storlek man valt
         */
        int size = 0;
        if (this.radioSmall.isSelected()) {
            size = 3;
        }
        if (this.radioMedium.isSelected()) {
            size = 5;
        }
        if (this.radioLarge.isSelected()) {
            size = 7;
        }

        currentPizza = new Pizza(size);
        this.txfCost.setText("$" + currentPizza.getTotalCost());
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        /**
         * Tar bort toppings från den temporära pizzan
         */
        if (currentPizza.removeTopping()) {
            this.lstCurrent.setModel(dmCurrent);
            dmCurrent.remove(dmCurrent.getSize() - 1);

            this.txfCost.setText("$" + currentPizza.getTotalCost());
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnFinishPizzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishPizzaActionPerformed
        // TODO add your handling code here:
        /**
         * Kontrollerar att pizzan inte är tom, för vem vill äta en tom pizza
         * annars lägger den in pizzan som en pizza hos kunden
         */
        if (currentPizza != null && currentPizza.getCounter() > 0) {
            customerList.get(customerIndex).addPizza(currentPizza);
        }
        /**
         * Skapar en "ny" frame och skickar tillbaka kundlistan och indexet och
         * raderar denna frame
         */
        new OrderListFrame(customerList, customerIndex).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnFinishPizzaActionPerformed

    private void btnPriceSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriceSortActionPerformed
        // TODO add your handling code here:
        /**
         * borde egentligen vara en metod men eftersom att den bara används när
         * man trycker på knappen så ligger algoritmen här för att spara plats
         * och göra det mer lättläst
         */
        boolean sorted = false;
        Topping temp;
        while (!sorted) {
            sorted = true;
            for (int i = 0; i < toppingList.size() - 1; i++) {
                if (toppingList.get(i).getPrice() > toppingList.get(i + 1).getPrice()) {
                    temp = toppingList.get(i);
                    toppingList.set(i, toppingList.get(i + 1));
                    toppingList.set((i + 1), temp);
                    sorted = false;
                }
            }
        }

        refreshlstTopping();
    }//GEN-LAST:event_btnPriceSortActionPerformed

    private void btnAlphaSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlphaSortActionPerformed
        /**
         * borde egentligen vara en metod men eftersom att den bara används när
         * man trycker på knappen så ligger algoritmen här för att spara plats
         * och göra det mer lättläst
         */
        boolean sorted = false;
        Topping temp;
        while (!sorted) {
            sorted = true;
            for (int i = 0; i < toppingList.size() - 1; i++) {
                if (toppingList.get(i).getName().compareToIgnoreCase(toppingList.get(i + 1).getName()) > 0) {
                    temp = toppingList.get(i);
                    toppingList.set(i, toppingList.get(i + 1));
                    toppingList.set((i + 1), temp);
                    sorted = false;
                }
            }
        }
        refreshlstTopping();
    }//GEN-LAST:event_btnAlphaSortActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderCustomPizzaFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new OrderCustomPizzaFrame(customerList, customerIndex).setVisible(true);
        });
    }

    /**
     * Rensar och fyller listan med toppings igen, används när man sorterar
     */
    private void refreshlstTopping() {
        this.lstToppings.setModel(dmTopping);
        dmTopping.clear();
        for (int i = 0; i < toppingList.size(); i++) {
            dmTopping.addElement(toppingList.get(i).toString());
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAlphaSort;
    private javax.swing.JButton btnFinishPizza;
    private javax.swing.JButton btnPriceSort;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> lstCurrent;
    private javax.swing.JList<String> lstToppings;
    private photoPanel photoPanel1;
    private javax.swing.JRadioButton radioLarge;
    private javax.swing.JRadioButton radioMedium;
    private javax.swing.JRadioButton radioSmall;
    private javax.swing.JTextField txfCost;
    // End of variables declaration//GEN-END:variables
}
